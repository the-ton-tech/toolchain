name: 'SBT Reward on PR Merge'
description: 'Awards user SBT reward for merged PR'
branding:
  icon: 'chevron-right'
  color: 'blue'

inputs:
  github_token:
    description: 'GitHub token used to read PR details and post comments/labels'
    required: true
  society_api_key:
    description: 'API key of TON Society Platform'
    required: true
  society_partner_id:
    description: 'Partner identifier of TON Society Platform'
    required: true
  activity_id:
    description: >
      Activity identifier for which user is rewarded, to create a new activity refer to TON Society Platform https://github.com/ton-society/sbt-platform
      or alias:
        - "blueprint" or "sandbox" = 9747
        - "tl-b" or "tl-b-tool" = 9745
    required: true
  xps_min:
    description: 'Minimum allowed XPS amount'
    required: false
    default: 0
  xps_max:
    description: 'Maximum allowed XPS amount'
    required: false
    default: 15000
  on_reward_label:
    description: 'Label for marking the rewarded PR'
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: Run reward workflow
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        # language=js
        script: |
          // Only on closed & merged PRs
          if (context.eventName !== 'pull_request' || context.payload.action !== 'closed') {
            core.notice('No issued event is not a closed pull request');
            return;
          }
          const pull_request = context.payload.pull_request;
          if (!pull_request.merged) {
            core.notice('No issued pull request not merged');
            return;
          }
          const pull_number = pull_request.number;
          // Resolve activity_id
          let activity_id = `${{ inputs.activity_id }}`;
          if (!/^\d+$/.test(activity_id)) {
            switch (activity_id) {
              case 'blueprint':
              case 'sandbox':
                activity_id = '9747';
                break;
              case 'tl-b':
              case 'tl-b-tool':
                activity_id = '9745';
                break;
              default:
                core.notice(`Invalid activity_id: ${activity_id}`);
                return;
            }
          }
          // Resolve XPS
          const xps_max = parseInt(`${{ inputs.xps_max }}`, 10);
          const xps_min = parseInt(`${{ inputs.xps_min }}`, 10);
          const reviews = (await github.rest.pulls.listReviews({...context.repo, pull_number})).data;
          const approvals = reviews.filter(review => review.state === 'APPROVED');
          const xps_reviews = [];
          for (const review of approvals) {
            if (!review.body) continue;
            const match = review.body.match(/XPS\s*=\s*(-?\d+)/i);
            if (!match) continue;
            const value = parseInt(match[1], 10);
            const permission = (await github.rest.repos.getCollaboratorPermissionLevel({
              ...context.repo,
              username: review.user.login
            })).data.permission;
            if (['admin', 'maintain', 'write'].includes(permission)) {
              xps_reviews.push(value);
            }
          }
          const xps_sum = xps_reviews.reduce((acc, cnt) => acc + cnt, 0);
          const xps_average = xps_sum === 0 ? xps_min : Math.round(xps_sum / xps_reviews.length)
          const xps = Math.min(xps_average, xps_max)
          core.debug({xps_max, xps_min, xps_sum, xps_average, xps});
          if (xps <= 0) {
            core.notice(`No issued activity_id=${activity_id} XPS=0`);
            return;
          }
          // Get PR author
          const user_id = pull_request.user.id;
          const user_login = pull_request.user.login;
          // Get PR title and number
          const pr_title = pull_request.title;
          const pr_number = pull_request.number;
          const description = `Reward for the Pull Request #${pr_number} titled "${pr_title}"`;
          // Society API Allowlist
          const payload = xps === xps_max ? { description } : { score: xps, description };
          const url = `https://id.ton.org/v1/activities/${activity_id}/allowlist/github-ids/${user_id}`;
          const body = JSON.stringify(payload);
          const response = await fetch(url, {
            method: 'POST',
            headers: {
              'x-api-key': `${{ inputs.society_api_key }}`,
              'x-partner-id': `${{ inputs.society_partner_id }}`,
              'Content-Type': 'application/json'
            },
            body
          });
          core.debug({url, body, response});
          if (!response.ok) {
            core.notice(`No issued activity_id=${activity_id} user_id=${user_id} XPS=${xps} Society API status: ${response.status}`);
            return;
          }
          const result = await response.json();
          const reward_link = result.data.reward_link_url;
          core.notice(`Added allow issue reward activity_id=${activity_id} XPS=${xps} reward_link=${reward_link}`);
          // Comment on PR
          github.rest.issues.createComment({
            ...context.repo,
            issue_number: pull_number,
            body: `ðŸŽ‰ @${user_login}, your reward XPS=${xps} is ready: ${reward_link}`
          })
          const on_reward_label = `${{ inputs.on_reward_label }}`;
          if (on_reward_label !== '') {
            github.rest.issues.addLabels({
              ...context.repo,
              issue_number: pull_number,
              labels: [on_reward_label]
            }) 
          }
